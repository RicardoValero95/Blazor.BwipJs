@page "/"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Playground</MudText>
    <MudGrid Style="background-color: var(--mud-palette-background-grey);">
        <MudItem md="8" Class="mud-text-align-center my-auto">
            <Barcode BarcodeType="@BarcodeType"
                     Text="@Text"
                     IncludeText="@IncludeText"
                     TextXAlign="@TextXAlign"
                     TextYAlign="@TextYAlign"
                     ScaleX="@ScaleX"
                     ScaleY="@ScaleY"
                     Height="@Height"
                     Width="@Width"
                     Rotate="@Rotate" />
        </MudItem>
        <MudItem md="4">
            <MudCard>
                <MudCardContent>
                    <MudAutocomplete Label="Barcode type" @bind-Value="BarcodeType"
                                     SearchFunc="@Search" Immediate="true" MinCharacters="0" ResetValueOnEmptyText="true" />
                    <div style="display:flex; align-items:flex-end;">
                        <MudTextField Label="Text" @bind-Value="Text" Immediate="true"></MudTextField>
                        <MudTooltip Text="Include text">
                            <MudToggleIconButton @bind-Toggled="@IncludeText"
                                                 Icon="@Icons.Material.Filled.VisibilityOff"
                                                 ToggledIcon="@Icons.Material.Filled.Visibility" />
                        </MudTooltip>
                    </div>
                    <MudSelect Label="Text x-align" @bind-Value="TextXAlign">
                        @foreach (var item in Enum.GetValues(typeof(TextXAlign)).Cast<TextXAlign>().ToArray())
                        {
                            <MudSelectItem Value="item">
                                @item
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Label="Text y-align" @bind-Value="TextYAlign">
                        @foreach (var item in Enum.GetValues(typeof(TextYAlign)).Cast<TextYAlign>().ToArray())
                        {
                            <MudSelectItem Value="item">
                                @item
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Label="Rotate" @bind-Value="Rotate" Text=@Rotate.ToString()>
                        @foreach (var item in Enum.GetValues(typeof(Rotate)).Cast<Rotate>().ToArray())
                        {
                            <MudSelectItem Value="item">
                                @item
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <MudSlider @bind-Value="ScaleX"
                               Step="1"
                               Min="0" Max="10">
                        <MudText Typo="Typo.caption">
                            Scale x:
                            @ScaleX
                        </MudText>
                    </MudSlider>
                    <MudSlider @bind-Value="ScaleY"
                               Step="1"
                               Min="0" Max="10">
                        <MudText Typo="Typo.caption">
                            Scale y:
                            @ScaleY
                        </MudText>
                    </MudSlider>
                    <div style="display:flex; align-items:flex-end;">
                        <MudTextField Label="H (mm)"
                                      @bind-Value="Height"
                                      Immediate="true">
                        </MudTextField>
                        <MudTextField Label="W (mm)"
                                      @bind-Value="Width"
                                      Immediate="true">
                        </MudTextField>
                        <MudTooltip Text="Constrain proportions">
                            <MudToggleIconButton @bind-Toggled="@ConstrainSizeAspectRatio"
                                                 Icon="@Icons.Material.Filled.LinkOff"
                                                 ToggledIcon="@Icons.Material.Filled.Link" />
                        </MudTooltip>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    BarcodeType BarcodeType { get; set; } = BarcodeType.code128;
    string Text { get; set; } = "hello world";
    bool IncludeText { get; set; } = true;
    TextXAlign TextXAlign { get; set; }
    TextYAlign TextYAlign { get; set; }
    Rotate Rotate { get; set; }
    int ScaleX { get; set; } = 4;
    int? ScaleY { get; set; }
    int Height { get; set; } = 10;
    int Width { get; set; }

    bool ConstrainSizeAspectRatio { get; set; }

    IEnumerable<BarcodeType> BarcodeTypeList = Enum.GetValues(typeof(BarcodeType)).Cast<BarcodeType>().ToList();

    private Task<IEnumerable<BarcodeType>> Search(string? value)
    {
        var list = BarcodeTypeList.Where(x => x.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return Task.FromResult(list);
    }
}
